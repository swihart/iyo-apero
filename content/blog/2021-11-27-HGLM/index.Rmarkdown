---
title: "Binomial-Beta HGLM"
subtitle: "A comparison of `hglm::hglm` and `gnlrim::gnlrim`"
excerpt: "We know `gnlrim` supports non-normal random intercept distributions as well as nonlinear predictors.  So can we fit a HGLM using `gnrlim`?"
date: 2021-11-27
author: "Bruce Swihart"
draft: false
images:
series:
tags:
categories:
  - Musings
layout: single-sidebar
---

I'm not very familiar with HGLMs.  My introduction to them was probably in 2009 when I was writing my thesis on bridging distributions.  Lee and Nelder had published a couple of papers critiquing ("offering another view") of the transfer function approach to getting marginal beta coefficients from a conditional model that was put forth by Heagerty (1999) and Heagerty and Zeger (2000).

Fast-forward to this morning and I had the notion of trying to get `gnlrim` to fit a Binomial-Beta HGLM -- or at least exploring the similarities.

My thinking was I know `gnlrim` can fit Binomial random intercept models and I feel comfortable editing in different mixture distributions.  Spoiler alert -- it took a little tinkering and head-scratching, but in the end I was able to add some functionality to `gnlrim` and show off a few features of `gnlrim` along the way.  The results from `gnlrim` didn't exactly match up with those of `hglm`, and maybe I'll dig deeper into that another day.



Here are some resources:


  * [Youtube Playlist on HGLM](https://www.youtube.com/playlist?list=PLn1OmZECD-n15vnYzvJDy5GxjNpVV5Jr8)

  * [R Journal `hglm`](https://journal.r-project.org/archive/2010/RJ-2010-009/RJ-2010-009.pdf) See Section 2.8.

  * [Lee & Nelder (1996)](https://rss.onlinelibrary.wiley.com/doi/pdfdirect/10.1111/j.2517-6161.1996.tb02105.x)  Pay attention to Sections 2.5 and 6.3.
  
  
```{r, message=FALSE, warning=FALSE}
library(hglm)
library(gnlrim) ## github
```


### The `hglm::hglm()` Binomial-Beta fit
#### Seed Germination Data

From Section 2.8 of the [hglm vignette](https://cran.rstudio.com/web/packages/hglm/vignettes/hglm.pdf), we can fit a Binomial-Beta HGLM using hglm and access the estimates in a variety of ways.  I'll be focusing on the Fixed Effects and the Dispersion parameter.

```{r}
data(seeds)
germ.hglm <- 
  hglm(fixed = r/n ~ extract * I(seed == "O73"), 
       weights = n, 
       data = seeds,
       random = ~1 | plate, 
       family = binomial(), 
       rand.family = Beta(), 
       fix.disp = 1)
## print just fixed effects
germ.hglm$fixef 
## print out random intercept predictions
germ.hglm$ranef 
## list all random intercept predictions
print(germ.hglm, print.ranef = TRUE) 
```

Stray observations:  the random intercepts are all really close to 0.50, which makes me think the shape parameter $a$ for the ${\rm Beta}(a,a)$ distribution must be considerably large (remember, ${\rm Beta}(1,1)$ is uniform (in purple below) and as $a$ increases the density for ${\rm Beta}(a,a)$ gets more and more concentrated about 0.50 (blue; red).  As $a$ gets below 1 it starts "blowing up" near x=0 and x=1 (orange).)

```{r, echo=TRUE, }
plot (seq(0,1,0.001),dbeta(seq(0,1,0.001),36.0,36.0), col="red"   , lwd=3, 
      type="l", xlab="x", ylab="beta densities")
lines(seq(0,1,0.001),dbeta(seq(0,1,0.001),20.0,20.0), col="blue"  , lwd=3,)
lines(seq(0,1,0.001),dbeta(seq(0,1,0.001), 1.0, 1.0), col="purple", lwd=3,)
lines(seq(0,1,0.001),dbeta(seq(0,1,0.001), 0.5, 0.5), col="orange", lwd=3,)
```


### `gnlrim::gnlrim()` fit
#### Seed Germination Data
Using `gnlrim` requires a little bit of setup.
```{r, eval=TRUE}
ybind <- cbind(seeds$r,seeds$n-seeds$r)
x1 <- (seeds$extract == "Cucumber") + 0L
x2 <- I(seeds$seed == "O73") + 0L
x3 <- x1*x2
plate.id <- seeds$plate
```

Our first approach is to just use the built in `mixture="beta"` that was left over from `repeated::gnlmix()`.  The random intercept is listed as `rand`.  This did not successfully run, see the commented error message.  My initial guess was that [Beta densities](https://en.wikipedia.org/wiki/Beta_prime_distribution) go off to Inf at 0 and 1 for values $\alpha=\beta < 1$ and this was causing problems.  

```{r, eval=FALSE}
germ.gnlrim <-
 gnlrim(y=ybind,
         mu = ~ plogis(Intercept + 
                         x1*extract + 
                         x2*seed73 + 
                         x3*intx + 
                         rand
                       ),
         pmu = c(Intercept=0,extract=0,seed73=0,intx=0),
         pmix=c(alp1_eq_alp2=2),
         p_uppb = c(  1,   2,  1,  1, 20),
         p_lowb = c( -2,  -1, -1, -1, 0.2),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="beta",
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=1,
         method='nlminb'
  )
# 
# [1] NaN
# Error in gnlrim(y = ybind, mu = ~plogis(Intercept + x1 * extract + x2 *  : 
#   Likelihood returns Inf or NAs: invalid initial values, wrong model, or probabilities too small to calculate
# In addition: Warning message:
# In log(int1(fn, 0, 1)) : NaNs produced
```

I started tinkering, and for some reason switched `int1` with `intb` in the code guts and things started successfully running.  So I implemented `mixture= "beta-HGLM"`, and was pleased to see I was getting somewhere.  But the intercept was a bit off --  `-1.037249` vs `-0.54240130`. 

```{r}
germ.gnlrim <-
  gnlrim(y=ybind,
         mu = ~ plogis(Intercept + 
                         x1*extract + 
                         x2*seed73 + 
                         x3*intx + 
                         rand),
         pmu = c(Intercept=0,extract=0,seed73=0,intx=0),
         pmix=c(alp1_eq_alp2=20),
         p_uppb = c(  1,   2,  1,  1, 30),
         p_lowb = c( -2,  -1, -1, -1, 0.2),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="beta-HGLM", ## NEW!
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=1,
         method='nlminb'
  )


## compare -- pretty close!  except the intercept
rbind(
  hglm=as.numeric(germ.hglm$fixef),
  gnlrim.rand=germ.gnlrim[1:4]
)
```

I realized that while putting `rand ~ Beta(alp1_eq_alp2,alp1_eq_alp2)` was correct, it really needed to be logit linked.  To test the waters I put a `log(rand)`:


```{r}
germ.gnlrim.logrand <-
 gnlrim(y=ybind,
         mu = ~ plogis(Intercept + 
                         x1*extract + 
                         x2*seed73 + 
                         x3*intx + 
                         log(rand)  ## try a log.
                       ),
         pmu = c(Intercept=0,extract=0,seed73=0,intx=0),
         pmix=c(alp1_eq_alp2=2),
         p_uppb = c(  1,   2,  1,  1, 20),
         p_lowb = c( -2,  -1, -1, -1, 0.2),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="beta-HGLM",
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=0,
         method='nlminb'
  )

## log.rand not quite what we wanted
rbind(
  hglm=as.numeric(germ.hglm$fixef),
  gnlrim.rand=germ.gnlrim[1:4],
  gnlrim.log.rand= germ.gnlrim.logrand[1:4]
)

```

So naturally I would just type `log(rand/(1-rand))` and everything would work right?

Right?

```{r, eval=FALSE}
germ.gnlrim.logitrand <-
 gnlrim(y=ybind,
         mu = ~ plogis(Intercept + 
                         x1*extract + 
                         x2*seed73 + 
                         x3*intx + 
                         log(rand/(1-rand)) ## logit
                       ),
         pmu = c(Intercept=0,extract=0,seed73=0,intx=0),
         pmix=c(alp1_eq_alp2=2),
         p_uppb = c(  1,   2,  1,  1, 20),
         p_lowb = c( -2,  -1, -1, -1, 0.2),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="beta-HGLM",
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=0,
         method='nlminb'
  )
# 
# Error in gnlrim(y = ybind, mu = ~plogis(Intercept + x1 * extract + x2 *  : 
#   Likelihood returns Inf or NAs: invalid initial values, wrong model, or probabilities too small to calculate
# In addition: There were 50 or more warnings (use warnings() to see the first 50)
# > warnings()
# Warning messages:
# 1: In log(rand/(1 - rand)) : NaNs produced
# 2: In log(rand/(1 - rand)) : NaNs produced

```

Swing and a miss!

I thought I was stuck but then started skimming Wikipedia for Related Distributions and transformations involving the Beta distribution.  We were in luck!
I learned that if u~beta, then u/(1-u) is betaprime [(thanks to Wikipedia)](https://en.wikipedia.org/wiki/Beta_prime_distribution). If we can get `rand` to be betaprime, then we can take the log of that.  So I found `extraDistr::dbetapr()` and added it into the `gnlrim` functionality by specifying `mixture="betaprime"`.  Going forward in this exercise, `rand` has a betaprime distribution and taking the log of it should be in the spirit of the Binomial-Beta HGLM.  Since betaprime has the [0,infty] domain, we use intb to do the integration (this is a note to self).

To aid our investigation, we can use another feature of `gnlrim` when `method="nlminb"`:  provide upper and lower bounds and put them so tightly we effectively lock down the estimates.

Let's just go ahead and lock down the coefficients to those we got from `hglm::hglm` and see what the corresponding shape parameters `alp1_eq_alp2` would be for the beta mixture distribution.  We do a little algebra and add a 5th column onto our summary table to bring into the picture what the shape parameter estimates have been for each fitting:

```{r}
ldhc <- lock.down.hglm.coef <- as.numeric(germ.hglm$fixef)

gnlrim.logit.rand.ldhc <-
  gnlrim(y=ybind,
         mu = ~ plogis(Intercept + 
                         x1*extract + 
                         x2*seed73 + 
                         x3*intx + 
                         log(rand) ## log(betaprime)
                       ),
         pmu = c(Intercept=ldhc[1],extract=ldhc[2],seed73=ldhc[3],intx=ldhc[4]),
         pmix=c(alp1_eq_alp2=20),
         p_uppb = c(  ldhc,  100),
         p_lowb = c(  ldhc,  0),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="betaprime", ## NEW!
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=0,
         method='nlminb'
  )

## Lee and Nelder 1996 JRSS-B
##   from section 6.3, page 640  
## the dispersion should be:
1/(2*gnlrim.logit.rand.ldhc[5]+1)
## which doesn't match up with hglm::hglm():
(disp.hglm.seeds <- 0.0244)
(alpha.hglm.seeds <- 0.5*(1/disp.hglm.seeds-1)) 


rbind(
  hglm=c(as.numeric(germ.hglm$fixef),alpha.hglm.seeds),
  gnlrim.rand=germ.gnlrim[1:5],
  gnlrim.log.rand= germ.gnlrim.logrand[1:5],
  gnlrim.logit.rand.ldhc= gnlrim.logit.rand.ldhc[1:5]
)

```

I don't quite know what's going on in the first and last row of the table above -- I would have expected the gap to be closer than `35.18` vs `19.99` for the alpha=alpha1=alpha2 of the beta distribution.  

So let's go the opposite direction: lock down the shape parameter and see how different the coefficients are...


```{r}

gnlrim.logit.rand.ldha <-
  gnlrim(y=ybind,
         mu = ~ plogis(Intercept + x1*extract + x2*seed73 + x3*intx + log(rand)),
         pmu = c(Intercept=0,extract=0,seed73=0,intx=0),
         pmix=c(alp1_eq_alp2=alpha.hglm.seeds),
         p_uppb = c(  1,   2,  1,  1, alpha.hglm.seeds),
         p_lowb = c( -2,  -1, -1, -1, alpha.hglm.seeds),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="betaprime",
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=0,
         method='nlminb'
  )

rbind(
hglm=c(as.numeric(germ.hglm$fixef),alpha.hglm.seeds),
gnlrim.rand=germ.gnlrim[1:5],
gnlrim.log.rand= germ.gnlrim.logrand[1:5],
gnlrim.logit.rand.ldhc= gnlrim.logit.rand.ldhc[1:5],
gnlrim.logit.rand.ldha= gnlrim.logit.rand.ldha[1:5]
)


```

The coefficients of the last row and first row are pretty similar, I suppose.

Let's not lock any thing down and let gnlrim try to hit this HGLM-style model -- we'll put it on the top row of the summary table to compare with the hglm output.

```{r}

binomial.beta.gnlrim <-
  gnlrim(y=ybind,
         mu = ~ plogis(Intercept + x1*extract + x2*seed73 + x3*intx + log(rand)),
         pmu = c(Intercept=0,extract=0,seed73=0,intx=0),
         pmix=c(alp1_eq_alp2=alpha.hglm.seeds),
         p_uppb = c(  1,   2,  1,  1, 1e02),
         p_lowb = c( -2,  -1, -1, -1, 1e-3),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="betaprime",
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=0,
         method='nlminb'
  )

print(
  rbind(
    binomial.beta.gnlrim = binomial.beta.gnlrim[1:5],
    hglm=c(as.numeric(germ.hglm$fixef),alpha.hglm.seeds),
    gnlrim.rand=germ.gnlrim[1:5],
    gnlrim.log.rand= germ.gnlrim.logrand[1:5],
    gnlrim.logit.rand.ldhc= gnlrim.logit.rand.ldhc[1:5],
    gnlrim.logit.rand.ldha= gnlrim.logit.rand.ldha[1:5]
  ),
  digits=4)

```

<!-- THIS ISNOT TRUE.  LOOKS LIKE YOU NEED OVERDISPERSED BINOMAIL n=1 which is nonsensical -->
<!-- # Upon reading the 1996 paper more closely, I think they did a binomial-normal GLMM for the middle column of Table 2 -- we can do that by quickly changing mixture distributions and using identity link for rand: -->
 

This is what Clayton and Breslow 1993 fit for germination, straight up ML:

Ahhhh!  ML.  That's what `gnlrim` does.  Does gnlrim need REML?  [Ben Bolker doesn't seem to think so.](https://stats.stackexchange.com/q/49039/35034)

[BIAS intercept for rare events. see page 700](https://gking.harvard.edu/files/baby0s.pdf#Page=11)

```{r}

binomial.norm.glmm <-
  gnlrim(y=ybind,
         mu = ~ plogis(Intercept + x1*extract + x2*seed73 + x3*intx + rand),
         pmu = c(Intercept=0,extract=0,seed73=0,intx=0),
         pmix=c(alp1_eq_alp2=alpha.hglm.seeds),
         p_uppb = c(  1,   2,  1,  1, 1e02),
         p_lowb = c( -2,  -1, -1, -1, 1e-3),
         distribution="binomial",
         nest=plate.id,
         random="rand",
         mixture="normal-var",
         ooo=TRUE,
         compute_hessian = FALSE,
         compute_kkt = FALSE,
         trace=0,
         method='nlminb'
  )

print(
  rbind(
    binomial.beta.gnlrim = binomial.beta.gnlrim[1:5],
    hglm=c(as.numeric(germ.hglm$fixef),alpha.hglm.seeds),
    gnlrim.rand=germ.gnlrim[1:5],
    gnlrim.log.rand= germ.gnlrim.logrand[1:5],
    gnlrim.logit.rand.ldhc= gnlrim.logit.rand.ldhc[1:5],
    gnlrim.logit.rand.ldha= gnlrim.logit.rand.ldha[1:5],
    binomial.norm.glmm= binomial.norm.glmm[1:5]
  ),
  digits=4)

```



I'll have to dig into this more at a later date.  But at the end of the day this little exercise has led to:

  * A blog post
  * Learning about the betaprime distribution
  * implementing betaprime and beta-HGLM in gnlrim
  * getting a little more familiar with HGLM
